// Code generated by protoc-gen-go. DO NOT EDIT.
// source: play.proto

package playpb

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	reflexpb "github.com/luno/reflex/reflexpb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_play_2fff05159952d204, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type GetRoundDataReq struct {
	RoundID              int64    `protobuf:"varint,1,opt,name=roundID,proto3" json:"roundID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoundDataReq) Reset()         { *m = GetRoundDataReq{} }
func (m *GetRoundDataReq) String() string { return proto.CompactTextString(m) }
func (*GetRoundDataReq) ProtoMessage()    {}
func (*GetRoundDataReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_play_2fff05159952d204, []int{1}
}
func (m *GetRoundDataReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRoundDataReq.Unmarshal(m, b)
}
func (m *GetRoundDataReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRoundDataReq.Marshal(b, m, deterministic)
}
func (dst *GetRoundDataReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoundDataReq.Merge(dst, src)
}
func (m *GetRoundDataReq) XXX_Size() int {
	return xxx_messageInfo_GetRoundDataReq.Size(m)
}
func (m *GetRoundDataReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoundDataReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoundDataReq proto.InternalMessageInfo

func (m *GetRoundDataReq) GetRoundID() int64 {
	if m != nil {
		return m.RoundID
	}
	return 0
}

type RoundData struct {
	ExternalID           int64           `protobuf:"varint,1,opt,name=externalID,proto3" json:"externalID,omitempty"`
	Included             bool            `protobuf:"varint,2,opt,name=included,proto3" json:"included,omitempty"`
	Submitted            bool            `protobuf:"varint,3,opt,name=submitted,proto3" json:"submitted,omitempty"`
	Rank                 int64           `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	Parts                map[int64]int64 `protobuf:"bytes,5,rep,name=parts,proto3" json:"parts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RoundData) Reset()         { *m = RoundData{} }
func (m *RoundData) String() string { return proto.CompactTextString(m) }
func (*RoundData) ProtoMessage()    {}
func (*RoundData) Descriptor() ([]byte, []int) {
	return fileDescriptor_play_2fff05159952d204, []int{2}
}
func (m *RoundData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoundData.Unmarshal(m, b)
}
func (m *RoundData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoundData.Marshal(b, m, deterministic)
}
func (dst *RoundData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundData.Merge(dst, src)
}
func (m *RoundData) XXX_Size() int {
	return xxx_messageInfo_RoundData.Size(m)
}
func (m *RoundData) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundData.DiscardUnknown(m)
}

var xxx_messageInfo_RoundData proto.InternalMessageInfo

func (m *RoundData) GetExternalID() int64 {
	if m != nil {
		return m.ExternalID
	}
	return 0
}

func (m *RoundData) GetIncluded() bool {
	if m != nil {
		return m.Included
	}
	return false
}

func (m *RoundData) GetSubmitted() bool {
	if m != nil {
		return m.Submitted
	}
	return false
}

func (m *RoundData) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *RoundData) GetParts() map[int64]int64 {
	if m != nil {
		return m.Parts
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "playpb.Empty")
	proto.RegisterType((*GetRoundDataReq)(nil), "playpb.GetRoundDataReq")
	proto.RegisterType((*RoundData)(nil), "playpb.RoundData")
	proto.RegisterMapType((map[int64]int64)(nil), "playpb.RoundData.PartsEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EngineClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Stream(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (Engine_StreamClient, error)
	GetRoundData(ctx context.Context, in *GetRoundDataReq, opts ...grpc.CallOption) (*RoundData, error)
}

type engineClient struct {
	cc *grpc.ClientConn
}

func NewEngineClient(cc *grpc.ClientConn) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/playpb.Engine/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) Stream(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (Engine_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Engine_serviceDesc.Streams[0], "/playpb.Engine/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Engine_StreamClient interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type engineStreamClient struct {
	grpc.ClientStream
}

func (x *engineStreamClient) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *engineClient) GetRoundData(ctx context.Context, in *GetRoundDataReq, opts ...grpc.CallOption) (*RoundData, error) {
	out := new(RoundData)
	err := c.cc.Invoke(ctx, "/playpb.Engine/GetRoundData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServer is the server API for Engine service.
type EngineServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	Stream(*reflexpb.StreamRequest, Engine_StreamServer) error
	GetRoundData(context.Context, *GetRoundDataReq) (*RoundData, error)
}

func RegisterEngineServer(s *grpc.Server, srv EngineServer) {
	s.RegisterService(&_Engine_serviceDesc, srv)
}

func _Engine_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playpb.Engine/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(reflexpb.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineServer).Stream(m, &engineStreamServer{stream})
}

type Engine_StreamServer interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type engineStreamServer struct {
	grpc.ServerStream
}

func (x *engineStreamServer) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Engine_GetRoundData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoundDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetRoundData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playpb.Engine/GetRoundData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetRoundData(ctx, req.(*GetRoundDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Engine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "playpb.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Engine_Ping_Handler,
		},
		{
			MethodName: "GetRoundData",
			Handler:    _Engine_GetRoundData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Engine_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "play.proto",
}

func init() { proto.RegisterFile("play.proto", fileDescriptor_play_2fff05159952d204) }

var fileDescriptor_play_2fff05159952d204 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xd1, 0x6e, 0xaa, 0x40,
	0x10, 0x15, 0x11, 0xd4, 0xb9, 0xf7, 0xc6, 0xdb, 0x49, 0x13, 0x09, 0x31, 0x8d, 0xe1, 0xa1, 0x31,
	0x69, 0x83, 0x8d, 0x4d, 0x1a, 0xd3, 0xf4, 0x51, 0xd2, 0xf4, 0xcd, 0xd0, 0x2f, 0x58, 0x64, 0x6a,
	0x89, 0xb0, 0xe0, 0xba, 0x6b, 0xe4, 0x87, 0xfa, 0x6b, 0xfd, 0x8d, 0x06, 0x10, 0xb4, 0xed, 0x13,
	0xe7, 0x9c, 0x19, 0x66, 0xcf, 0xcc, 0x01, 0xc8, 0x62, 0x96, 0xbb, 0x99, 0x48, 0x65, 0x8a, 0x66,
	0x81, 0xb3, 0xc0, 0xbe, 0x5d, 0x47, 0xf2, 0x5d, 0x05, 0xee, 0x2a, 0x4d, 0xa6, 0xb1, 0xe2, 0xe9,
	0x54, 0xd0, 0x5b, 0x4c, 0x87, 0xe3, 0x27, 0x0b, 0x8e, 0xa0, 0xfa, 0xcb, 0xe9, 0x82, 0xe1, 0x25,
	0x99, 0xcc, 0x9d, 0x1b, 0x18, 0x3c, 0x93, 0xf4, 0x53, 0xc5, 0xc3, 0x05, 0x93, 0xcc, 0xa7, 0x2d,
	0x5a, 0xd0, 0x15, 0x05, 0x7f, 0x59, 0x58, 0xda, 0x58, 0x9b, 0xe8, 0x7e, 0x4d, 0x9d, 0x4f, 0x0d,
	0xfa, 0x4d, 0x2b, 0x5e, 0x01, 0xd0, 0x41, 0x92, 0xe0, 0x2c, 0x6e, 0x5a, 0xcf, 0x14, 0xb4, 0xa1,
	0x17, 0xf1, 0x55, 0xac, 0x42, 0x0a, 0xad, 0xf6, 0x58, 0x9b, 0xf4, 0xfc, 0x86, 0xe3, 0x08, 0xfa,
	0x3b, 0x15, 0x24, 0x91, 0x94, 0x14, 0x5a, 0x7a, 0x59, 0x3c, 0x09, 0x88, 0xd0, 0x11, 0x8c, 0x6f,
	0xac, 0x4e, 0x39, 0xb3, 0xc4, 0x38, 0x03, 0x23, 0x63, 0x42, 0xee, 0x2c, 0x63, 0xac, 0x4f, 0xfe,
	0xcc, 0x46, 0x6e, 0xb5, 0xb7, 0xdb, 0xf8, 0x71, 0x97, 0x45, 0xd9, 0xe3, 0x52, 0xe4, 0x7e, 0xd5,
	0x6a, 0xcf, 0x01, 0x4e, 0x22, 0xfe, 0x07, 0x7d, 0x43, 0xf9, 0xd1, 0x68, 0x01, 0xf1, 0x12, 0x8c,
	0x3d, 0x8b, 0x15, 0x95, 0xf6, 0x74, 0xbf, 0x22, 0x8f, 0xed, 0xb9, 0x36, 0xfb, 0xd0, 0xc0, 0xf4,
	0xf8, 0x3a, 0xe2, 0x84, 0xd7, 0xd0, 0x59, 0x46, 0x7c, 0x8d, 0xff, 0xea, 0x17, 0xcb, 0xc3, 0xd9,
	0xdf, 0xa9, 0xd3, 0xc2, 0x07, 0x30, 0x5f, 0xa5, 0x20, 0x96, 0xe0, 0xd0, 0xad, 0x8f, 0xee, 0x56,
	0x8a, 0x4f, 0x5b, 0x45, 0x3b, 0x69, 0x0f, 0x4e, 0x05, 0x6f, 0x4f, 0x5c, 0x3a, 0xad, 0x3b, 0x0d,
	0x9f, 0xe0, 0xef, 0x79, 0x02, 0x38, 0xac, 0x07, 0xff, 0xc8, 0xc5, 0xbe, 0xf8, 0xb5, 0xb2, 0xd3,
	0x0a, 0xcc, 0x32, 0xcf, 0xfb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0x8a, 0x3c, 0xce, 0x13,
	0x02, 0x00, 0x00,
}
